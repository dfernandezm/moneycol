plugins {
    id "java"
    id "application"
    id 'com.google.cloud.tools.jib' version '2.6.0'
}

version "0.1.0"
group "data-collector"

repositories {
    mavenCentral()
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

ext {

    logbackVersion = "1.2.3"
    lombokVersion = "1.18.20"
    junitVersion = "5.6.0"
    mockitoJunitJupiterVersion = "2.22.0"
    firebaseSdkVersion = "6.12.2"
    micronautJunit5Version = "1.1.5"
    hamcrestVersion = "1.3"
    guavaVersion = "30.0-jre"
    assertjVersion = "3.18.1"
    gcpLibrariesBomVersion = "20.8.0"
}

dependencies {

    // IMPORTANT: lombok annotation processor needs to run before any other annotation
    // and Micronaut should be the last one to not interfere
    // https://docs.micronaut.io/latest/guide/index.html#lombok
    // https://github.com/micronaut-projects/micronaut-core/issues/2559
    compileOnly("org.projectlombok:lombok:$lombokVersion")
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")
    annotationProcessor('io.micronaut:micronaut-validation')
    annotationProcessor("info.picocli:picocli-codegen:4.2.0")

    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("info.picocli:picocli")
    implementation("io.micronaut.picocli:micronaut-picocli")
    developmentOnly("io.micronaut:micronaut-runtime-osx:$micronautVersion")
    runtimeOnly("ch.qos.logback:logback-classic")

    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.21.0'
    testImplementation("io.specto:hoverfly-java-junit5:0.14.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.0.1")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.0.1")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:4.12.1")

    // GCP support
    implementation("io.micronaut.gcp:micronaut-gcp-logging:4.0.0")
    implementation("io.micronaut.gcp:micronaut-gcp-common:4.0.0")
    implementation("io.micronaut.gcp:micronaut-gcp-tracing:4.0.0")
    implementation("io.micronaut.gcp:micronaut-gcp-pubsub:4.0.0")

    implementation group: 'javax.inject', name: 'javax.inject', version: '1'

    // Selenide
    implementation 'com.codeborne:selenide:5.22.1'

    // only need storage sdk from these
    implementation ("com.google.firebase:firebase-admin:$firebaseSdkVersion") {
        exclude group: "com.google.cloud", module: "google-cloud-firestore"
    }

    implementation group: 'com.google.cloud', name: 'google-cloud-firestore', version: '2.1.0'
    implementation("com.google.guava:guava:$guavaVersion")
    runtimeOnly("ch.qos.logback:logback-classic")
}

jib {
    from.image = "eu.gcr.io/moneycol/data-collector-base:0.1.0-1e2a0a5"
    container.mainClass = "com.moneycol.datacollector.Crawler"
    container.jvmFlags = ["-Xms200m", "-Xmx2900m"]
}

test.classpath += configurations.developmentOnly

mainClassName = "com.moneycol.datacollector.Crawler"

// use JUnit 5 platform
// environment variables required to run tests in command line:
// - GOOGLE_APPLICATION_CREDENTIALS: path to service account json key giving Firestore/Firebase Admin permission
test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    // Uncomment these lines to get full logging output when running
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}