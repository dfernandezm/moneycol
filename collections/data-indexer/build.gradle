plugins {
    id "java"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "application"
    id 'com.google.cloud.tools.jib' version '3.0.0'
}

version "0.1.0"
group "data-indexer"

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

ext {
    logbackVersion = "1.2.3"
    lombokVersion = "1.18.8"
    junitVersion = "5.6.0"
    mockitoJunitJupiterVersion = "2.22.0"
    firebaseSdkVersion = "6.12.2"
    micronautJunit5Version = "1.1.5"
    hamcrestVersion = "1.3"
    micronautVersion = "2.0.3"
    guavaVersion = "30.0-jre"
    assertjVersion = "3.18.1"
    gcpLibrariesBomVersion = "20.8.0"
}

dependencies {

    developmentOnly("io.micronaut:micronaut-runtime-osx:$micronautVersion")
    annotationProcessor(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    annotationProcessor("io.micronaut:micronaut-inject-java")
    annotationProcessor("io.micronaut:micronaut-validation")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")

    implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-runtime")
    implementation "org.projectlombok:lombok:$lombokVersion"
    implementation platform("com.google.cloud:libraries-bom:$gcpLibrariesBomVersion")
    implementation("com.google.cloud:google-cloud-storage")

    implementation("io.micronaut.gcp:micronaut-gcp-function")
    implementation("com.google.cloud:google-cloudevent-types:0.3.0")
    implementation("com.google.cloud.functions:functions-framework-api:1.0.4")
    implementation("com.google.cloud:google-cloud-pubsub")

    implementation("com.google.guava:guava:$guavaVersion")
    runtimeOnly("ch.qos.logback:logback-classic")

    testAnnotationProcessor(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    testAnnotationProcessor("io.micronaut:micronaut-inject-java")
    testImplementation("org.assertj:assertj-core:$assertjVersion")
    testImplementation(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")

    testImplementation "io.micronaut.test:micronaut-test-junit5:$micronautJunit5Version"
    testImplementation "io.micronaut.test:micronaut-test-core:$micronautJunit5Version"
    testImplementation "org.hamcrest:hamcrest-all:${hamcrestVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:$mockitoJunitJupiterVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"

    testImplementation "org.testcontainers:testcontainers:1.15.1"
    testImplementation "org.testcontainers:junit-jupiter:1.15.1"
    testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")
}

//jib {
//    from.image = "eu.gcr.io/moneycol/data-collector-base:0.1.0-1e2a0a5"
//    container.mainClass = "com.moneycol.datacollector.Crawler"
//    container.jvmFlags = ["-Xms200m", "-Xmx2900m"]
//}

test.classpath += configurations.developmentOnly

mainClassName = "com.moneycol.indexer.IndexerBatcher"
// use JUnit 5 platform
test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    // Uncomment these lines to get full logging output when running
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}