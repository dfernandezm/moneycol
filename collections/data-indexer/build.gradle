plugins {
    id("com.google.cloud.tools.jib") version "3.2.0"
}

version "0.1.0"
group "data-indexer"

ext {
    logbackVersion = "1.2.3"
    lombokVersion = "1.18.20"
    junitVersion = '5.6.0'
    mockitoJunitJupiterVersion = "2.22.0"
    firebaseSdkVersion = "6.12.2"
    micronautJunit5Version = "1.1.5"
    hamcrestVersion = "1.3"
    guavaVersion = "30.0-jre"
    assertjVersion = "3.18.1"
    gcpLibrariesBomVersion = "20.8.0"
    elasticsearchVersion = "6.8.19"
    rxJava2Version = "1.2.1"
}

ext.functionName = project.hasProperty("functionName") ? project.getProperty("functionName") : "data-indexer"
ext.mainClass = project.hasProperty("mainClass") ? project.getProperty("mainClass") : "com.moneycol.indexer.batcher.IndexerBatcher"

dependencies {

    // IMPORTANT: lombok annotation processor needs to run before any other annotation
    // and Micronaut should be the last one to not interfere
    // https://docs.micronaut.io/latest/guide/index.html#lombok
    // https://github.com/micronaut-projects/micronaut-core/issues/2559
    compileOnly("org.projectlombok:lombok:$lombokVersion")
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")

    runtimeOnly("ch.qos.logback:logback-classic")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind:$micronautVersion")
    implementation("io.micronaut:micronaut-runtime")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut.security:micronaut-security-jwt")

//    implementation("io.micronaut.rxjava2:micronaut-rxjava2")
//    implementation("io.micronaut.rxjava2:micronaut-rxjava2-http-client")
//    implementation("io.micronaut.rxjava2:micronaut-rxjava2-http-server-netty")
    implementation("io.micronaut.gcp:micronaut-gcp-tracing")
    implementation("io.micronaut.gcp:micronaut-gcp-function")

    //developmentOnly("io.micronaut:micronaut-runtime-osx:$micronautVersion")
    //annotationProcessor(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    //annotationProcessor("io.micronaut:micronaut-inject-java")
    //annotationProcessor("io.micronaut:micronaut-validation")
    //annotationProcessor("io.micronaut.security:micronaut-security-annotations")

    //implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    //implementation("io.micronaut:micronaut-inject")
    //implementation("io.micronaut:micronaut-runtime")
    //implementation "org.projectlombok:lombok:$lombokVersion"
    implementation platform("com.google.cloud:libraries-bom:$gcpLibrariesBomVersion")
    implementation("com.google.cloud:google-cloud-storage")


    implementation("com.google.cloud:google-cloudevent-types:0.3.0")
    implementation("com.google.cloud.functions:functions-framework-api:1.0.4")
    implementation("com.google.cloud:google-cloud-pubsub")
    implementation("com.google.firebase:firebase-admin:8.0.0")
    implementation("com.google.guava:guava:$guavaVersion")

    implementation("org.elasticsearch.client:elasticsearch-rest-high-level-client:$elasticsearchVersion")

    // Official Java Kubernetes Client
    implementation("io.kubernetes:client-java:10.0.0")
    implementation("io.kubernetes:client-java-extended:10.0.0")

    // GKE Java Client
    implementation("com.google.cloud:google-cloud-container:2.2.1")

    runtimeOnly("ch.qos.logback:logback-classic")

    //testAnnotationProcessor(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    //testAnnotationProcessor("io.micronaut:micronaut-inject-java")
    testImplementation("org.assertj:assertj-core:$assertjVersion")
   // testImplementation(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")

    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")

    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation "io.micronaut.test:micronaut-test-core"
    testImplementation "org.hamcrest:hamcrest-all:$hamcrestVersion"
    testImplementation "org.mockito:mockito-junit-jupiter:$mockitoJunitJupiterVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"

    testImplementation "org.testcontainers:testcontainers:1.15.1"
    testImplementation "org.testcontainers:junit-jupiter:1.15.1"
    testImplementation "org.testcontainers:gcloud:1.15.1"
    testImplementation "com.github.stefanbirkner:system-lambda:1.2.0"
    testImplementation "org.testcontainers:elasticsearch:1.16.0"

    testImplementation("io.specto:hoverfly-java-junit5:0.14.0")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.0.1")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:4.12.1")

   // testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")
}

shadowJar {
    archiveBaseName.set(functionName)
    mergeServiceFiles()
}

mainClassName = mainClass

// use JUnit 5 platform
test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    // Uncomment these lines to get full logging output when running
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}