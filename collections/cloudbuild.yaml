substitutions:
  _GCS_CACHE_BUCKET: gradle-jib-cache
  _IMAGE_NAME: collections
  _VERSION: 0.7.2-jib-cb2
  _FIREBASE_API_KEY: default
  _GOOGLE_APPLICATION_CREDENTIALS: /workspace/moneycol-firestore-collections-api.json

steps:

  # First, loads the cached files from GCS if they exist.
  - waitFor: ['-']
    name: gcr.io/cloud-builders/gsutil
    dir: /root
    entrypoint: bash
    args:
      - -c
      - |
        (
          gsutil cp gs://${_GCS_CACHE_BUCKET}/gradle-cache.tar.gz /tmp/gradle-cache.tar.gz &&
          tar -xzf /tmp/gradle-cache.tar.gz
        ) || echo 'Cache not found'
    volumes:
      - name: user.home
        path: /root
  - waitFor: ['-']
    name: gcr.io/cloud-builders/gsutil
    dir: /root
    entrypoint: bash
    args:
      - -c
      - |
        (
          gsutil cp gs://${_GCS_CACHE_BUCKET}/jib-cache.tar.gz /tmp/jib-cache.tar.gz &&
          tar -xzf /tmp/jib-cache.tar.gz
        ) || echo 'Cache not found'
    volumes:
      - name: user.home
        path: /root
  - waitFor: ['-']
    name: gcr.io/cloud-builders/gsutil
    dir: /root
    entrypoint: bash
    args:
      - -c
      - |
        gsutil cp gs://moneycol-keys/moneycol-firestore-collections-api.json /workspace/moneycol-firestore-collections-api.json
    volumes:
      - name: user.home
        path: /root

  - waitFor: ['-']
    name: "adoptopenjdk:11-jdk-hotspot"
    dir: /root
    entrypoint: bash
    args:
      - -c
      - |
        echo "Writing Docker Config & Checking Java version"
        java -version
        mkdir .docker &&
        ln -s $$HOME/.docker/config.json .docker/config.json
    volumes:
      - name: user.home
        path: /root

  # Runs the Jib build.
  - id: jib-build
    name: "adoptopenjdk:11-jdk-hotspot"
    entrypoint: bash
    args:
      - -c
      - |
        cd /workspace
        ls -lrt
        echo "Running tests..."
        export GOOGLE_APPLICATION_CREDENTIALS=${_GOOGLE_APPLICATION_CREDENTIALS}
        export FIREBASE_API_KEY=${_FIREBASE_API_KEY}
        echo "GOOGLE_APPLICATION_CREDENTIALS -> $$GOOGLE_APPLICATION_CREDENTIALS"
        cd collections
        ./gradlew :server:test
        ./gradlew :server:jib --image=eu.gcr.io/${PROJECT_ID}/${_IMAGE_NAME}:${_VERSION}
    volumes:
      - name: user.home
        path: /root

    # Saves the files to the GCS cache.
  - waitFor:
      - jib-build
    name: gcr.io/cloud-builders/gsutil
    dir: /root
    entrypoint: bash
    # Caches the Gradle cache.
    args:
      - -c
      - |
        tar -czf /tmp/gradle-cache.tar.gz .gradle &&
        gsutil cp /tmp/gradle-cache.tar.gz gs://${_GCS_CACHE_BUCKET}/gradle-cache.tar.gz
    volumes:
      - name: user.home
        path: /root

  - waitFor:
      - jib-build
    name: gcr.io/cloud-builders/gsutil
    dir: /root
    entrypoint: bash
    # Caches the Jib cache.
    args:
      - -c
      - |
        tar -czf /tmp/jib-cache.tar.gz .cache &&
        gsutil cp /tmp/jib-cache.tar.gz gs://${_GCS_CACHE_BUCKET}/jib-cache.tar.gz
    volumes:
      - name: user.home
        path: /root

  - id: save-test-report
    waitFor:
    - jib-build
    name: gcr.io/cloud-builders/gsutil
    dir: /root
    entrypoint: bash
    args:
      - -c
      - |
        gsutil cp -r /workspace/collections/server/build/reports gs://moneycol-ci/collections-test-reports
    volumes:
      - name: user.home
        path: /root